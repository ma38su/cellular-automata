{"version":3,"sources":["components/Cell.tsx","components/CellAutomata.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","x","y","size","color","state","width","height","fill","stroke","CellAutomata","stateArray","map","i","initState","type","batch","length","cellSize","cells","states","Array","keys","Math","floor","_","random","initCells","comps","App","initType","rule","max","interval","maxSeq","stateMachines","React","useMemo","rules","bit","push","toStateMachine","useState","setState","useEffect","id","setInterval","prev","newCells","stateMachine","i0","i2","nextState","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queries","window","location","search","slice","split","reduce","o","kv","key","val","init","toInitialType","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41dda363.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  x: number;\n  y: number;\n  size: number;\n  state: boolean;\n};\n\nfunction Cell(props: Props) {\n  const { x, y, size, state} = props;\n\n  const stroke = '#444';\n  const color = state ? '#555' : '#FFF';\n\n  return (<rect x={x} y={y} width={size} height={size} fill={color} stroke={stroke} />);\n}\nexport { Cell };","import React from 'react';\nimport { Cell } from './Cell';\n\ntype Props = {\n  y: number;\n  size: number;\n  state: boolean[];\n};\n\nfunction CellAutomata(props: Props) {\n  const {\n    y,\n    size,\n    state: stateArray\n  } = props;\n\n  return (\n    <>\n    {\n      stateArray.map((state, i) => {\n        return <Cell x={i * size} y={y} size={size} state={state} key={i} />\n      })\n    }\n    </>\n  );\n}\n\nexport { CellAutomata };","import React from 'react';\nimport { CellAutomata } from './components/CellAutomata';\nimport { InitialType } from './types/InitialType';\n\nfunction toStateMachine(rule: number) {\n  const rules = [];\n  for (const i of [...new Array(8).keys()]) {\n    const bit = 1 << i;\n    rules.push((rule & bit) !== 0);\n  }\n  return rules;\n}\n\nfunction nextState(stateMachine: boolean[], states: boolean[], i: number): boolean {\n  const i0 = i - 1;\n  const i2 = i + 1;\n  const b0 = (i0 >= 0 && states[i0]) ? 4 : 0;\n  const b1 = states[i] ? 2 : 0;\n  const b2 = (i2 < states.length && states[i2]) ? 1 : 0;\n  return stateMachine[b0 | b1 | b2];\n}\n\nfunction initCells(type: InitialType, batch: number, length: number) {\n  const states = [...new Array(length).keys()].map(i => false);\n  switch (type) {\n    case 'left':\n      for (let i = 0; i < batch; ++i) {\n        states[i] = true;\n      }\n      break;\n    case 'center':\n      for (let i = 0; i < batch; ++i) {\n        states[Math.floor(i + (length - batch) / 2)] = true;\n      }\n      break;\n    case 'right':\n      for (let i = 0; i < batch; ++i) {\n        states[states.length - 1 - i] = true;\n      }\n      break;\n    case 'all':\n      return states.map(_ => true);\n    case 'random':\n      return states.map(_ => Math.random() > 0.5 ? true : false);\n  }\n  return states;\n}\n\ntype Props = {\n  initType: InitialType,\n  batch: number;\n  rule: number;\n  length: number;\n  max: number;\n  interval: number;\n  size: number;\n}\n\ntype State = {\n  cells: boolean[];\n  comps: JSX.Element[];\n};\n\nfunction initState(type: InitialType, batch: number, length: number, cellSize: number) {\n  const cells = initCells(type, batch, length);\n  return {\n    cells,\n    comps: [\n      <CellAutomata\n        y={0}\n        size={cellSize}\n        state={cells}\n        key={0}\n      />\n    ],\n  }\n}\n\nfunction App(props: Props) {\n  const {\n    initType,\n    rule,\n    length,\n    batch,\n    max,\n    interval,\n    size: cellSize,\n  } = props;\n\n  const maxSeq = max < 1000 ? max : 1000;\n\n  const stateMachines = React.useMemo(() => {\n    return toStateMachine(rule);\n  }, [rule]);\n\n  const [ state, setState ] = React.useState<State>(initState(initType, batch, length, cellSize));\n\n  React.useEffect(() => {\n    const id = setInterval(() => {\n      setState(prev => {\n        const { cells, comps } = prev;\n        const newCells = [...cells.keys()]\n          .map(i => nextState(stateMachines, cells, i));\n        const i = comps.length;\n        const newComps = [\n          ...comps,\n          <CellAutomata\n            y={cellSize * i}\n            size={cellSize}\n            state={newCells}\n            key={i}\n          />\n        ];\n        return {\n          comps: newComps,\n          cells: newCells,\n        };\n      });\n    }, interval);\n    return () => {\n      clearInterval(id);\n    };\n  }, [stateMachines, maxSeq, interval, cellSize]);\n\n  return (\n    <svg>\n      { state.comps }\n    </svg>\n  );\n}\n\nexport { App };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { InitialType } from './types/InitialType';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\ntype Query = {\n  [key: string] : string;\n};\n\nconst queries = window.location.search.slice(1).split('&').reduce((o, kv) => {\n  const [key, val] = kv.split('=');\n  o[key] = val;\n  return o;\n}, {} as Query);\n\nfunction toInitialType(initType?: string): InitialType {\n  switch (initType) {\n    case 'blank':\n    case 'left':\n    case 'center':\n    case 'right':\n    case 'random':\n    case 'all':\n      return initType;\n    default:\n      return 'center';\n  }\n}\n\nconst init = toInitialType(queries['init']);\nconst rule = parseInt(queries['rule'] ?? '90');\nconst length = parseInt(queries['length'] ?? '200');\nconst batch = parseInt(queries['batch'] ?? '1');\nconst max = parseInt(queries['max'] ?? '200');\nconst interval = parseInt(queries['interval'] ?? '10');\nconst cellSize = parseInt(queries['cellsize'] ?? '8');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      initType={init}\n      rule={rule}\n      length={length}\n      interval={interval}\n      batch={batch}\n      max={max}\n      size={cellSize}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}