{"version":3,"sources":["components/Cell.tsx","components/CellAutomata.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cell","props","x","y","size","color","state","width","height","fill","stroke","CellAutomata","stateArray","map","i","initialState","type","batch","length","states","Array","keys","Math","floor","_","random","App","initType","rule","max","interval","maxSeq","React","useState","rules","bit","push","toStateMachine","stateMachines","cellTable","setCellTable","useEffect","id","setInterval","table","clearInterval","lastStates","newStates","stateMachine","i0","i2","nextState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queries","window","location","search","slice","split","reduce","o","kv","key","val","init","toInitialType","parseInt","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2ed825c.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  x: number;\n  y: number;\n  size: number;\n  state: boolean;\n};\n\nfunction Cell(props: Props) {\n  const { x, y, size, state} = props;\n\n  const stroke = '#444';\n  const color = state ? '#555' : '#FFF';\n\n  return (<rect x={x} y={y} width={size} height={size} fill={color} stroke={stroke} />);\n}\nexport { Cell };","import React from 'react';\nimport { Cell } from './Cell';\n\ntype Props = {\n  y: number;\n  size: number;\n  state: boolean[];\n};\n\nfunction CellAutomata(props: Props) {\n  const {\n    y,\n    size,\n    state: stateArray\n  } = props;\n\n  return (\n    <>\n    {\n      stateArray.map((state, i) => {\n        return <Cell x={i * size} y={y} size={size} state={state} key={i} />\n      })\n    }\n    </>\n  );\n}\n\nexport { CellAutomata };","import React from 'react';\nimport { CellAutomata } from './components/CellAutomata';\nimport { InitialType } from './types/InitialType';\n\nconst cellSize = 6;\n\nfunction toStateMachine(rule: number) {\n  const rules = [];\n  for (const i of [...new Array(8).keys()]) {\n    const bit = 1 << i;\n    rules.push((rule & bit) !== 0);\n  }\n  return rules;\n}\n\nfunction nextState(stateMachine: boolean[], states: boolean[], i: number): boolean {\n  const i0 = i - 1;\n  const i2 = i + 1;\n  const b0 = (i0 >= 0 && states[i0]) ? 4 : 0;\n  const b1 = states[i] ? 2 : 0;\n  const b2 = (i2 < states.length && states[i2]) ? 1 : 0;\n  return stateMachine[b0 | b1 | b2];\n}\n\nfunction initialState(type: InitialType, batch: number, length: number) {\n  const states = [...new Array(length).keys()].map(i => false);\n  switch (type) {\n    case 'left':\n      for (let i = 0; i < batch; ++i) {\n        states[i] = true;\n      }\n      break;\n    case 'center':\n      for (let i = 0; i < batch; ++i) {\n        states[Math.floor(i + (length - batch) / 2)] = true;\n      }\n      break;\n    case 'right':\n      for (let i = 0; i < batch; ++i) {\n        states[states.length - 1 - i] = true;\n      }\n      break;\n    case 'all':\n      return states.map(_ => true);\n    case 'random':\n      return states.map(_ => Math.random() > 0.5 ? true : false);\n  }\n  return states;\n}\n\ntype Props = {\n  initType: InitialType,\n  batch: number;\n  rule: number;\n  length: number;\n  max: number;\n  interval: number;\n}\n\nfunction App(props: Props) {\n  const { initType,\n    rule,\n    length,\n    batch,\n    max,\n    interval\n  } = props;\n\n  const maxSeq = max < 1000 ? max : 1000;\n\n  const [ stateMachines ] = React.useState(toStateMachine(rule));\n  const [ cellTable, setCellTable ] = React.useState<boolean[][]>([initialState(initType, batch, length)]);\n\n  React.useEffect(() => {\n    const id = setInterval(() => {\n      setCellTable(table => {\n        if (table.length > maxSeq) {\n          clearInterval(id);\n        }\n\n        const lastStates = table[table.length - 1];\n        const newStates = [...lastStates.keys()].map(i => {\n          return nextState(stateMachines, lastStates, i);\n        });\n        return [...table, newStates];\n      });\n    }, interval);\n    return () => clearInterval(id);\n  }, [stateMachines, maxSeq, interval]);\n  return (\n    <svg>\n      {\n        cellTable.map((stateArray, i) => {\n          return <CellAutomata y={cellSize * i} size={cellSize} state={stateArray} key={i} />;\n        })\n      }\n    </svg>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { InitialType } from './types/InitialType';\n\ntype Query = {\n  [key: string] : string;\n};\n\nconst queries = window.location.search.slice(1).split('&').reduce((o, kv) => {\n  const [key, val] = kv.split('=');\n  o[key] = val;\n  return o;\n}, {} as Query);\n\nfunction toInitialType(initType?: string): InitialType {\n  switch (initType) {\n    case 'blank':\n    case 'left':\n    case 'center':\n    case 'right':\n    case 'random':\n    case 'all':\n      return initType;\n    default:\n      return 'center';\n  }\n}\n\nconst init = toInitialType(queries['init']);\nconst rule = parseInt(queries['rule'] ?? '90');\nconst length = parseInt(queries['length'] ?? '200');\nconst batch = parseInt(queries['batch'] ?? '1');\nconst max = parseInt(queries['max'] ?? '200');\nconst interval = parseInt(queries['interval'] ?? '50');\n\nconsole.log(\"cell-automata\", {rule, init, length});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App\n      initType={init}\n      rule={rule}\n      length={length}\n      interval={interval}\n      batch={batch}\n      max={max}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}